	.file	"engine.c"
	.text
	.align	2
	.global	matmult
	.ascii	"matmult\000"
	.align	2
	.word	4278190088
	.type	matmult, %function
matmult:
	@ args = 0, pretend = 0, frame = 4, outgoing = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	stmfd	sp!, {r4, r5, r6, r7, r8, r9}
	sub	r1, r1, #4
	sub	sp, sp, #4
	mov	r7, #0
	str	r1, [sp, #0]
	mov	r9, #0
.L2:
	ldr	r3, [sp, #0]
	add	r5, r0, r7
	mov	r6, #0
	add	r8, r3, r7
.L4:
	flds	s15, .L10
	str	r9, [r5], #4	@ float
	mov	r4, r8
	add	ip, r2, r6, asl #2
	mov	r3, #4
.L3:
	mov	r1, ip
	add	r4, r4, #4
	flds	s13, [r4, #0]
	flds	s14, [r1, #0]
	fmacs	s15, s13, s14
	subs	r3, r3, #1
	add	ip, ip, #16
	fsts	s15, [r5, #-4]
	bne	.L3
	add	r6, r6, #1
	cmp	r6, #4
	bne	.L4
	add	r7, r7, #16
	cmp	r7, #64
	bne	.L2
	add	sp, sp, #4
	ldmfd	sp!, {r4, r5, r6, r7, r8, r9}
	bx	lr
.L11:
	.align	2
.L10:
	.word	0
	.size	matmult, .-matmult
	.align	2
	.global	matcopy
	.ascii	"matcopy\000"
	.align	2
	.word	4278190088
	.type	matcopy, %function
matcopy:
	@ args = 0, pretend = 0, frame = 0, outgoing = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #12
	add	r0, r0, #12
	mov	r3, #4
.L13:
	ldr	r2, [r1, #-12]	@ float
	subs	r3, r3, #1
	str	r2, [r0, #-12]	@ float
	ldr	r2, [r1, #-8]	@ float
	str	r2, [r0, #-8]	@ float
	ldr	r2, [r1, #-4]	@ float
	str	r2, [r0, #-4]	@ float
	ldr	r2, [r1], #16	@ float
	str	r2, [r0], #16	@ float
	bne	.L13
	bx	lr
	.size	matcopy, .-matcopy
	.align	2
	.global	inittrans
	.ascii	"inittrans\000"
	.align	2
	.word	4278190092
	.type	inittrans, %function
inittrans:
	@ args = 0, pretend = 0, frame = 0, outgoing = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L16
	mov	r2, #0
	mov	r1, #1065353216
	str	r1, [r3, #0]	@ float
	str	r2, [r3, #4]	@ float
	str	r2, [r3, #8]	@ float
	str	r2, [r3, #12]	@ float
	str	r2, [r3, #16]	@ float
	str	r1, [r3, #20]	@ float
	str	r2, [r3, #24]	@ float
	str	r2, [r3, #28]	@ float
	str	r2, [r3, #32]	@ float
	str	r2, [r3, #36]	@ float
	str	r1, [r3, #40]	@ float
	str	r2, [r3, #44]	@ float
	str	r2, [r3, #48]	@ float
	str	r2, [r3, #52]	@ float
	str	r2, [r3, #56]	@ float
	str	r1, [r3, #60]	@ float
	bx	lr
.L17:
	.align	2
.L16:
	.word	matrix
	.size	inittrans, .-inittrans
	.align	2
	.global	scale
	.ascii	"scale\000"
	.align	2
	.word	4278190088
	.type	scale, %function
scale:
	@ args = 0, pretend = 0, frame = 128, outgoing = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {r4, fp, ip, lr, pc}
	sub	fp, ip, #4
	cmp	sp, sl
	bllt	__rt_stkovf_split_small
	ldr	r4, .L19
	sub	sp, sp, #128
	mov	r3, #0
	mov	ip, r0	@ float
	str	r3, [sp, #68]	@ float
	str	r3, [sp, #72]	@ float
	str	r3, [sp, #76]	@ float
	str	r3, [sp, #80]	@ float
	str	r3, [sp, #88]	@ float
	str	r3, [sp, #92]	@ float
	str	r3, [sp, #96]	@ float
	str	r3, [sp, #100]	@ float
	str	r3, [sp, #108]	@ float
	str	r3, [sp, #112]	@ float
	str	r3, [sp, #116]	@ float
	str	r3, [sp, #120]	@ float
	mov	r0, sp
	mov	r3, #1065353216
	add	r1, sp, #64
	mov	r2, r4
	str	r3, [sp, #124]	@ float
	str	ip, [sp, #64]	@ float
	str	ip, [sp, #84]	@ float
	str	ip, [sp, #104]	@ float
	bl	matmult
	ldr	r3, [sp, #0]	@ float
	str	r3, [r4, #0]	@ float
	ldr	r3, [sp, #4]	@ float
	str	r3, [r4, #4]	@ float
	ldr	r3, [sp, #8]	@ float
	str	r3, [r4, #8]	@ float
	ldr	r3, [sp, #12]	@ float
	str	r3, [r4, #12]	@ float
	ldr	r3, [sp, #16]	@ float
	str	r3, [r4, #16]	@ float
	ldr	r3, [sp, #20]	@ float
	str	r3, [r4, #20]	@ float
	ldr	r3, [sp, #24]	@ float
	str	r3, [r4, #24]	@ float
	ldr	r3, [sp, #28]	@ float
	str	r3, [r4, #28]	@ float
	ldr	r3, [sp, #32]	@ float
	str	r3, [r4, #32]	@ float
	ldr	r3, [sp, #36]	@ float
	str	r3, [r4, #36]	@ float
	ldr	r3, [sp, #40]	@ float
	str	r3, [r4, #40]	@ float
	ldr	r3, [sp, #44]	@ float
	str	r3, [r4, #44]	@ float
	ldr	r3, [sp, #48]	@ float
	str	r3, [r4, #48]	@ float
	ldr	r3, [sp, #52]	@ float
	str	r3, [r4, #52]	@ float
	ldr	r3, [sp, #56]	@ float
	str	r3, [r4, #56]	@ float
	ldr	r3, [sp, #60]	@ float
	str	r3, [r4, #60]	@ float
	ldmea	fp, {r4, fp, sp, pc}
.L20:
	.align	2
.L19:
	.word	matrix
	.size	scale, .-scale
	.align	2
	.global	translate
	.ascii	"translate\000"
	.align	2
	.word	4278190092
	.type	translate, %function
translate:
	@ args = 0, pretend = 0, frame = 128, outgoing = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {r4, fp, ip, lr, pc}
	sub	fp, ip, #4
	cmp	sp, sl
	bllt	__rt_stkovf_split_small
	ldr	r4, .L22
	sub	sp, sp, #128
	mov	r3, #0
	mov	ip, #1065353216
	str	r0, [sp, #112]	@ float
	str	r1, [sp, #116]	@ float
	str	r2, [sp, #120]	@ float
	mov	r0, sp
	mov	r1, r4
	add	r2, sp, #64
	str	r3, [sp, #68]	@ float
	str	r3, [sp, #72]	@ float
	str	r3, [sp, #76]	@ float
	str	r3, [sp, #80]	@ float
	str	r3, [sp, #88]	@ float
	str	r3, [sp, #92]	@ float
	str	r3, [sp, #96]	@ float
	str	r3, [sp, #100]	@ float
	str	r3, [sp, #108]	@ float
	str	ip, [sp, #64]	@ float
	str	ip, [sp, #84]	@ float
	str	ip, [sp, #104]	@ float
	str	ip, [sp, #124]	@ float
	bl	matmult
	ldr	r3, [sp, #0]	@ float
	str	r3, [r4, #0]	@ float
	ldr	r3, [sp, #4]	@ float
	str	r3, [r4, #4]	@ float
	ldr	r3, [sp, #8]	@ float
	str	r3, [r4, #8]	@ float
	ldr	r3, [sp, #12]	@ float
	str	r3, [r4, #12]	@ float
	ldr	r3, [sp, #16]	@ float
	str	r3, [r4, #16]	@ float
	ldr	r3, [sp, #20]	@ float
	str	r3, [r4, #20]	@ float
	ldr	r3, [sp, #24]	@ float
	str	r3, [r4, #24]	@ float
	ldr	r3, [sp, #28]	@ float
	str	r3, [r4, #28]	@ float
	ldr	r3, [sp, #32]	@ float
	str	r3, [r4, #32]	@ float
	ldr	r3, [sp, #36]	@ float
	str	r3, [r4, #36]	@ float
	ldr	r3, [sp, #40]	@ float
	str	r3, [r4, #40]	@ float
	ldr	r3, [sp, #44]	@ float
	str	r3, [r4, #44]	@ float
	ldr	r3, [sp, #48]	@ float
	str	r3, [r4, #48]	@ float
	ldr	r3, [sp, #52]	@ float
	str	r3, [r4, #52]	@ float
	ldr	r3, [sp, #56]	@ float
	str	r3, [r4, #56]	@ float
	ldr	r3, [sp, #60]	@ float
	str	r3, [r4, #60]	@ float
	ldmea	fp, {r4, fp, sp, pc}
.L23:
	.align	2
.L22:
	.word	matrix
	.size	translate, .-translate
	.align	2
	.global	rotate
	.ascii	"rotate\000"
	.align	2
	.word	4278190088
	.type	rotate, %function
rotate:
	@ args = 0, pretend = 0, frame = 320, outgoing = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {r4, r5, r6, fp, ip, lr, pc}
	fstmfdd	sp!, {d8, d9, d10}
	sub	fp, ip, #4
	sub	ip, sp, #320
	cmp	ip, sl
	bllt	__rt_stkovf_split_big
	fmsr	s12, r0
	fcvtds	d10, s12
	sub	sp, sp, #320
	mov	r4, #0
	mov	r5, #1065353216
	fmsr	s18, r1
	fmrrd	r0, r1, d10
	fmsr	s16, r2
	str	r5, [sp, #256]	@ float
	str	r4, [sp, #260]	@ float
	str	r4, [sp, #264]	@ float
	str	r4, [sp, #268]	@ float
	str	r4, [sp, #272]	@ float
	bl	cos
	fmdrr	d7, r0, r1
	fcvtsd	s17, d7
	fmrrd	r0, r1, d10
	fsts	s17, [sp, #276]
	bl	sin
	fmdrr	d6, r0, r1
	fcvtsd	s15, d6
	fnegs	s14, s15
	ldr	r6, .L25
	add	r0, sp, #64
	mov	r2, r6
	add	r1, sp, #256
	fsts	s15, [sp, #280]
	fsts	s14, [sp, #292]
	fsts	s17, [sp, #296]
	str	r4, [sp, #284]	@ float
	str	r4, [sp, #288]	@ float
	str	r4, [sp, #300]	@ float
	str	r4, [sp, #304]	@ float
	str	r4, [sp, #308]	@ float
	str	r4, [sp, #312]	@ float
	str	r5, [sp, #316]	@ float
	bl	matmult
	fcvtds	d9, s18
	fmrrd	r0, r1, d9
	bl	cos
	fmdrr	d7, r0, r1
	fcvtsd	s17, d7
	fmrrd	r0, r1, d9
	fsts	s17, [sp, #192]
	str	r4, [sp, #196]	@ float
	bl	sin
	fmdrr	d6, r0, r1
	fcvtsd	s15, d6
	fnegs	s14, s15
	add	r2, sp, #64
	mov	r0, sp
	add	r1, sp, #192
	fsts	s14, [sp, #200]
	fsts	s15, [sp, #224]
	fsts	s17, [sp, #232]
	str	r4, [sp, #204]	@ float
	str	r4, [sp, #208]	@ float
	str	r5, [sp, #212]	@ float
	str	r4, [sp, #216]	@ float
	str	r4, [sp, #220]	@ float
	str	r4, [sp, #228]	@ float
	str	r4, [sp, #236]	@ float
	str	r4, [sp, #240]	@ float
	str	r4, [sp, #244]	@ float
	str	r4, [sp, #248]	@ float
	str	r5, [sp, #252]	@ float
	bl	matmult
	fcvtds	d8, s16
	fmrrd	r0, r1, d8
	bl	cos
	fmdrr	d7, r0, r1
	fcvtsd	s18, d7
	fmrrd	r0, r1, d8
	fsts	s18, [sp, #128]
	bl	sin
	fmdrr	d6, r0, r1
	fcvtsd	s15, d6
	fnegs	s14, s15
	mov	r0, r6
	add	r1, sp, #128
	mov	r2, sp
	fsts	s15, [sp, #132]
	str	r4, [sp, #136]	@ float
	str	r4, [sp, #140]	@ float
	fsts	s14, [sp, #144]
	fsts	s18, [sp, #148]
	str	r4, [sp, #152]	@ float
	str	r4, [sp, #156]	@ float
	str	r4, [sp, #160]	@ float
	str	r4, [sp, #164]	@ float
	str	r5, [sp, #168]	@ float
	str	r4, [sp, #172]	@ float
	str	r4, [sp, #176]	@ float
	str	r4, [sp, #180]	@ float
	str	r4, [sp, #184]	@ float
	str	r5, [sp, #188]	@ float
	bl	matmult
	sub	ip, fp, #48
	fldmfdd	ip!, {d8, d9, d10}
	ldmea	fp, {r4, r5, r6, fp, sp, pc}
.L26:
	.align	2
.L25:
	.word	matrix
	.size	rotate, .-rotate
	.align	2
	.global	transform
	.ascii	"transform\000"
	.align	2
	.word	4278190092
	.type	transform, %function
transform:
	@ args = 0, pretend = 0, frame = 0, outgoing = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r0, #0]
	cmp	r1, #0
	bxle	lr
	ldr	r2, .L36
	ldr	r3, [r0, #8]
	flds	s7, [r2, #0]
	flds	s8, [r2, #4]
	flds	s9, [r2, #8]
	add	r3, r3, #32
	add	r1, r1, r1, asl #3
	add	r0, r3, r1, asl #2
.L30:
	ldrb	r1, [r3, #0]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L29
	flds	s14, [r2, #16]
	flds	s15, [r3, #-28]
	flds	s12, [r3, #-32]
	fmuls	s14, s15, s14
	flds	s10, [r2, #32]
	flds	s13, [r3, #-24]
	fmacs	s14, s12, s7
	flds	s11, [r2, #48]
	fmacs	s14, s13, s10
	fadds	s14, s14, s11
	fsts	s14, [r3, #-20]
	flds	s14, [r2, #20]
	fmuls	s14, s15, s14
	flds	s10, [r2, #36]
	fmacs	s14, s12, s8
	flds	s11, [r2, #52]
	fmacs	s14, s13, s10
	fadds	s14, s14, s11
	fsts	s14, [r3, #-16]
	flds	s14, [r2, #24]
	fmuls	s15, s15, s14
	flds	s11, [r2, #40]
	fmacs	s15, s12, s9
	flds	s14, [r2, #56]
	fmacs	s15, s13, s11
	fadds	s15, s15, s14
	fsts	s15, [r3, #-12]
.L29:
	add	r3, r3, #36
	cmp	r3, r0
	bne	.L30
	bx	lr
.L37:
	.align	2
.L36:
	.word	matrix
	.size	transform, .-transform
	.align	2
	.global	project
	.ascii	"project\000"
	.align	2
	.word	4278190088
	.type	project, %function
project:
	@ args = 0, pretend = 0, frame = 0, outgoing = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #0]
	fmsr	s11, r1	@ int
	cmp	r2, #0
	bxle	lr
	flds	s10, .L50
	ldr	r3, [r0, #8]
	add	r2, r2, r2, asl #3
	add	r3, r3, #32
	add	r1, r3, r2, asl #2
.L43:
	ldrb	r2, [r3, #0]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L40
	flds	s15, [r3, #-12]
	fcmpzs	s15
	fsitos	s14, s11
	fmstat
	flds	s13, [r3, #-20]
	flds	s12, [r3, #-16]
	fcpysls	s15, s10
	fmuls	s13, s14, s13
	fmuls	s14, s14, s12
	fdivs	s13, s13, s15
	fdivs	s15, s14, s15
	ftosizs	s13, s13
	ftosizs	s15, s15
	fsts	s13, [r3, #-8]	@ int
	fsts	s15, [r3, #-4]	@ int
.L40:
	add	r3, r3, #36
	cmp	r3, r1
	bne	.L43
	bx	lr
.L51:
	.align	2
.L50:
	.word	953267991
	.size	project, .-project
	.align	2
	.global	calc_normal
	.ascii	"calc_normal\000"
	.align	2
	.word	4278190092
	.type	calc_normal, %function
calc_normal:
	@ args = 0, pretend = 0, frame = 0, outgoing = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	str	r4, [sp, #-4]!
	ldr	r3, [r1, #4]
	ldr	r4, [r1, #0]
	ldr	r2, [r1, #8]
	ldr	ip, [r0, #8]
	add	r4, r4, r4, asl #3
	add	r3, r3, r3, asl #3
	add	r2, r2, r2, asl #3
	add	r3, ip, r3, asl #2
	add	r2, ip, r2, asl #2
	add	r0, ip, r4, asl #2
	flds	s12, [r0, #20]
	flds	s13, [r0, #12]
	flds	s14, [r2, #20]
	flds	s15, [r3, #12]
	flds	s9, [r0, #16]
	flds	s7, [r2, #12]
	flds	s10, [r2, #16]
	flds	s11, [r3, #20]
	fsubs	s15, s15, s13
	fsubs	s14, s14, s12
	flds	s8, [r3, #16]
	fsubs	s11, s11, s12
	fsubs	s10, s10, s9
	fmuls	s12, s14, s15
	fsubs	s13, s7, s13
	fsubs	s9, s8, s9
	fmscs	s12, s11, s13
	fmuls	s11, s11, s10
	fmuls	s13, s9, s13
	fmscs	s11, s9, s14
	fmuls	s14, s12, s12
	fmscs	s13, s10, s15
	fmacs	s14, s11, s11
	fmacs	s14, s13, s13
	fcvtds	d7, s14
	fsqrtd	d7, d7
	fcmpd	d7, d7
	fmstat
	fsts	s12, [r1, #16]
	fsts	s13, [r1, #20]
	fsts	s11, [r1, #12]
	ldrne	r3, .L54
	movne	r2, #1
	strne	r2, [r3, #0]
	fcvtsd	s14, d7
	flds	s13, [r1, #12]
	flds	s15, [r1, #16]
	flds	s12, [r1, #20]
	fdivs	s13, s13, s14
	fdivs	s15, s15, s14
	fdivs	s14, s12, s14
	fsts	s13, [r1, #12]
	fsts	s15, [r1, #16]
	fsts	s14, [r1, #20]
	ldmfd	sp!, {r4}
	bx	lr
.L55:
	.align	2
.L54:
	.word	errno
	.size	calc_normal, .-calc_normal
	.align	2
	.global	calc_dot_product
	.ascii	"calc_dot_product\000"
	.align	2
	.word	4278190100
	.type	calc_dot_product, %function
calc_dot_product:
	@ args = 8, pretend = 0, frame = 0, outgoing = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	fmsr	s13, r1
	flds	s15, [sp, #0]
	fmsr	s14, r0
	fmuls	s15, s13, s15
	fmsr	s13, r3
	fmacs	s15, s14, s13
	flds	s14, [sp, #4]
	fmsr	s13, r2
	fmacs	s15, s13, s14
	fmrs	r0, s15
	bx	lr
	.size	calc_dot_product, .-calc_dot_product
	.align	2
	.global	shoelace
	.ascii	"shoelace\000"
	.align	2
	.word	4278190092
	.type	shoelace, %function
shoelace:
	@ args = 0, pretend = 0, frame = 0, outgoing = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	ip, [r1, #0]
	ldr	r2, [r1, #4]
	ldr	r3, [r0, #8]
	add	ip, ip, ip, asl #3
	add	r2, r2, r2, asl #3
	add	ip, r3, ip, asl #2
	add	r2, r3, r2, asl #2
	stmfd	sp!, {r4, r5, r6, r7}
	ldr	r4, [ip, #24]
	ldr	r5, [r2, #24]
	ldr	ip, [ip, #28]
	ldr	r2, [r2, #28]
	ldr	r1, [r1, #8]
	mul	r7, r2, r4
	mul	r6, ip, r5
	add	r1, r1, r1, asl #3
	add	r3, r3, r1, asl #2
	ldr	r0, [r3, #28]
	rsb	r1, r6, r7
	mla	r5, r0, r5, r1
	ldr	r3, [r3, #24]
	rsb	r2, r2, ip
	mul	r4, r0, r4
	mla	r2, r2, r3, r5
	rsb	r0, r4, r2
	fmsr	s15, r0	@ int
	fsitos	s15, s15
	fmrs	r0, s15
	ldmfd	sp!, {r4, r5, r6, r7}
	bx	lr
	.size	shoelace, .-shoelace
	.align	2
	.global	calcvisible
	.ascii	"calcvisible\000"
	.align	2
	.word	4278190092
	.type	calcvisible, %function
calcvisible:
	@ args = 4, pretend = 0, frame = 0, outgoing = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #0]
	fmsr	s14, r3
	cmp	r2, #0
	flds	s12, [sp, #0]
	bxle	lr
	flds	s13, .L68
	ldr	r3, [r0, #8]
	add	r2, r2, r2, asl #3
	add	r2, r3, r2, asl #2
	mov	r1, #0
	mov	r0, #1
.L64:
	flds	s15, [r3, #8]
	fadds	s15, s14, s15
	fcmpes	s15, s13
	fmstat
	bls	.L60
	fcmpes	s15, s12
	fmstat
	strleb	r0, [r3, #32]
	ble	.L63
.L60:
	strb	r1, [r3, #32]
.L63:
	add	r3, r3, #36
	cmp	r3, r2
	bne	.L64
	bx	lr
.L69:
	.align	2
.L68:
	.word	1084227584
	.size	calcvisible, .-calcvisible
	.align	2
	.global	draw_shape
	.ascii	"draw_shape\000"
	.align	2
	.word	4278190092
	.type	draw_shape, %function
draw_shape:
	@ args = 0, pretend = 0, frame = 36, outgoing = 12
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
	sub	fp, ip, #4
	cmp	sp, sl
	bllt	__rt_stkovf_split_small
	ldr	r7, .L99
	sub	sp, sp, #48
	ldrb	r4, [r7, #0]	@ zero_extendqisi2
	mov	r6, r0
	cmp	r4, #0
	ldr	r0, [r0, #4]
	bne	.L71
	cmp	r0, #0
	movgt	r9, r4
	ble	.L70
.L72:
	ldr	r3, [r6, #12]
	ldr	r2, [r6, #8]
	ldr	ip, [r3, r4]
	add	r3, r3, r4
	add	ip, ip, ip, asl #3
	add	ip, r2, ip, asl #2
	ldrb	r1, [ip, #32]	@ zero_extendqisi2
	add	r9, r9, #1
	cmp	r1, #0
	ldmib	r3, {r1, r5}
	add	r1, r1, r1, asl #3
	add	r1, r2, r1, asl #2
	beq	.L78
	add	r5, r5, r5, asl #3
	add	r2, r2, r5, asl #2
	ldrb	r5, [r1, #32]	@ zero_extendqisi2
	cmp	r5, #0
	beq	.L78
	ldrb	r5, [r2, #32]	@ zero_extendqisi2
	cmp	r5, #0
	bne	.L97
.L78:
	cmp	r0, r9
	add	r4, r4, #28
	bgt	.L72
.L70:
	ldmea	fp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
.L71:
	cmp	r0, #0
	ble	.L70
	mov	r4, #0
	mov	r7, r4
.L75:
	ldr	r5, [r6, #12]
	ldr	r3, [r6, #8]
	ldr	r8, [r5, r4]
	add	r5, r5, r4
	add	r8, r8, r8, asl #3
	add	r8, r3, r8, asl #2
	ldrb	r2, [r8, #32]	@ zero_extendqisi2
	ldr	r9, [r5, #4]
	cmp	r2, #0
	add	r9, r9, r9, asl #3
	add	r7, r7, #1
	ldr	r2, [r5, #8]
	add	r9, r3, r9, asl #2
	beq	.L74
	add	r2, r2, r2, asl #3
	add	ip, r3, r2, asl #2
	ldrb	r3, [r9, #32]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L74
	ldrb	r3, [ip, #32]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L98
.L74:
	cmp	r0, r7
	add	r4, r4, #28
	bgt	.L75
	b	.L70
.L97:
	ldr	r0, [ip, #24]
	ldr	r8, [ip, #28]
	ldr	ip, [r2, #24]
	ldr	r2, [r2, #28]
	str	ip, [sp, #44]
	str	r2, [sp, #36]
	ldr	ip, .L99+4
	ldr	r2, .L99+8
	ldr	r5, [r1, #24]
	ldr	lr, [r1, #28]
	ldr	r1, [r2, #0]
	ldr	r2, [ip, #0]
	ldr	r3, [r3, #24]
	add	lr, r2, lr
	str	lr, [sp, #24]
	ldr	lr, [sp, #44]
	str	r3, [sp, #8]
	add	r0, r0, r1
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	add	ip, r1, lr
	str	r0, [sp, #28]
	add	r5, r1, r5
	ldr	r0, [sp, #36]
	ldr	r1, [sp, #8]
	add	lr, r2, r0
	add	r8, r8, r2
	mov	r0, r3
	str	r1, [sp, #0]
	str	r1, [sp, #4]
	add	r2, sp, #20
	add	r1, sp, #28
	add	r3, sp, #12
	str	r5, [sp, #20]
	str	r8, [sp, #32]
	str	ip, [sp, #12]
	str	lr, [sp, #16]
	bl	fast_draw_triangle
	ldr	r0, [r6, #4]
	b	.L78
.L98:
	ldr	r1, .L99+4
	ldr	lr, [r8, #28]
	ldr	r3, [r1, #0]
	ldr	r0, .L99+8
	add	r1, r3, lr
	ldr	r2, [r0, #0]
	ldr	lr, [r9, #24]
	ldr	r0, [r8, #24]
	add	r0, r2, r0
	add	r2, r2, lr
	ldr	lr, [r9, #28]
	add	r3, r3, lr
	ldr	lr, [r5, #24]
	str	ip, [sp, #40]
	str	lr, [sp, #0]
	bl	draw_line
	ldr	ip, [sp, #40]
	ldr	r1, .L99+4
	ldr	r3, [ip, #28]
	ldr	lr, [r1, #0]
	ldr	r0, .L99+8
	ldr	r1, [r8, #28]
	ldr	r2, [r0, #0]
	add	r1, lr, r1
	ldr	r0, [r8, #24]
	add	r3, lr, r3
	ldr	r8, [ip, #24]
	ldr	lr, [r5, #24]
	add	r0, r2, r0
	str	lr, [sp, #0]
	add	r2, r2, r8
	bl	draw_line
	ldr	ip, [sp, #40]
	ldr	r0, .L99+8
	ldr	r1, .L99+4
	ldr	r2, [r0, #0]
	ldr	r3, [r1, #0]
	ldr	lr, [ip, #24]
	ldr	r0, [r9, #24]
	ldr	r1, [r9, #28]
	ldr	ip, [ip, #28]
	ldr	r5, [r5, #24]
	add	r0, r2, r0
	add	r1, r3, r1
	str	r5, [sp, #0]
	add	r2, r2, lr
	add	r3, r3, ip
	bl	draw_line
	ldr	r0, [r6, #4]
	b	.L74
.L100:
	.align	2
.L99:
	.word	.LANCHOR0
	.word	y_origin
	.word	x_origin
	.size	draw_shape, .-draw_shape
	.comm	matrix,64,4
	.global	gouraud
	.global	wireframe
	.bss
.LANCHOR0 = . + 0
	.type	wireframe, %object
	.size	wireframe, 1
wireframe:
	.space	1
	.type	gouraud, %object
	.size	gouraud, 1
gouraud:
	.space	1
	.ident	"GCC: (GCCSDK GCC 4.7.4 Release 3) 4.7.4"
