	.file	"palette.c"
	.text
	.align	2
	.global	set_colour_vidc
	.ascii	"set_colour_vidc\000"
	.align	2
	.word	4278190096
	.type	set_colour_vidc, %function
set_colour_vidc:
	@ args = 0, pretend = 0, frame = 0, outgoing = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {r4, r5, r6, r7, fp, ip, lr, pc}
	sub	fp, ip, #4
	cmp	sp, sl
	bllt	__rt_stkovf_split_small
	uxtb	r4, r0
	mov	r0, #19
	uxtb	r5, r1
	uxtb	r6, r2
	uxtb	r7, r3
	bl	_kernel_oswrch
	mov	r0, r4
	bl	_kernel_oswrch
	mov	r0, #16
	bl	_kernel_oswrch
	mov	r0, r5
	bl	_kernel_oswrch
	mov	r0, r6
	bl	_kernel_oswrch
	mov	r0, r7
	bl	_kernel_oswrch
	ldmea	fp, {r4, r5, r6, r7, fp, sp, pc}
	.size	set_colour_vidc, .-set_colour_vidc
	.align	2
	.global	mix_colour
	.ascii	"mix_colour\000"
	.align	2
	.word	4278190092
	.type	mix_colour, %function
mix_colour:
	@ args = 12, pretend = 0, frame = 0, outgoing = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	flds	s11, .L8
	flds	s15, [sp, #8]
	fcmpes	s15, s11
	fmstat
	ldrb	ip, [sp, #0]	@ zero_extendqisi2
	uxtb	r0, r0
	fmsr	s13, ip	@ int
	ldrb	ip, [sp, #4]	@ zero_extendqisi2
	uxtb	r1, r1
	uxtb	r2, r2
	uxtb	r3, r3
	fmsr	s14, ip	@ int
	ble	.L7
	flds	s12, .L8+4
	fcpys	s15, s11
.L3:
	fmsr	s7, r3	@ int
	fsitos	s8, s7
	fmsr	s7, r2	@ int
	fmsr	s11, r1	@ int
	fsitos	s13, s13
	fsitos	s14, s14
	fsitos	s10, s7
	fmsr	s7, r0	@ int
	fsitos	s9, s11
	fmuls	s13, s13, s15
	fmuls	s14, s14, s15
	fsitos	s11, s7
	fmuls	s15, s8, s15
	fmacs	s13, s9, s12
	fmacs	s14, s10, s12
	fmacs	s15, s11, s12
	ftouizs	s13, s13
	ftouizs	s14, s14
	ftouizs	s15, s15
	fmrs	r3, s13	@ int
	fmrs	r2, s14	@ int
	fmrs	r0, s15	@ int
	uxtb	r3, r3
	uxtb	r2, r2
	mov	r3, r3, asl #8
	add	r3, r3, r2, asl #16
	uxtab	r0, r3, r0
	bx	lr
.L7:
	fcmpezs	s15
	fmstat
	fsubspl	s12, s11, s15
	fcpysmi	s12, s11
	fldsmi	s15, .L8+4
	b	.L3
.L9:
	.align	2
.L8:
	.word	1065353216
	.word	0
	.size	mix_colour, .-mix_colour
	.align	2
	.global	set_colour
	.ascii	"set_colour\000"
	.align	2
	.word	4278190092
	.type	set_colour, %function
set_colour:
	@ args = 16, pretend = 0, frame = 0, outgoing = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	cmp	sp, sl
	bllt	__rt_stkovf_split_small
	flds	s12, .L14
	flds	s15, [fp, #16]
	fcmpes	s15, s12
	fmstat
	ldrb	ip, [fp, #4]	@ zero_extendqisi2
	uxtb	r0, r0
	fmsr	s13, ip	@ int
	ldrb	ip, [fp, #8]	@ zero_extendqisi2
	uxtb	r1, r1
	fmsr	s14, ip	@ int
	ldrb	ip, [fp, #12]	@ zero_extendqisi2
	uxtb	r2, r2
	uxtb	r3, r3
	fmsr	s8, ip	@ int
	fcpysgt	s15, s12
	bgt	.L11
	fcmpzs	s15
	flds	s12, .L14+4
	fmstat
	fcpysmi	s15, s12
.L11:
	fmsr	s7, r1	@ int
	fmsr	s11, r2	@ int
	fsitos	s9, s7
	fsitos	s8, s8
	fmsr	s7, r3	@ int
	fsitos	s13, s13
	fsitos	s14, s14
	flds	s12, .L14
	fsitos	s10, s11
	fsubs	s12, s12, s15
	fmuls	s13, s13, s15
	fmuls	s14, s14, s15
	fsitos	s11, s7
	fmuls	s15, s8, s15
	fmacs	s13, s9, s12
	fmacs	s14, s10, s12
	fmacs	s15, s11, s12
	ftouizs	s13, s13
	ftouizs	s14, s14
	ftouizs	s15, s15
	fmrs	r1, s13	@ int
	fmrs	r2, s14	@ int
	fmrs	r3, s15	@ int
	uxtb	r1, r1
	uxtb	r2, r2
	uxtb	r3, r3
	bl	set_colour_vidc
	ldmea	fp, {fp, sp, pc}
.L15:
	.align	2
.L14:
	.word	1065353216
	.word	0
	.size	set_colour, .-set_colour
	.align	2
	.global	generate_palette_block_full
	.ascii	"generate_palette_block_full\000"
	.align	2
	.word	4278190108
	.type	generate_palette_block_full, %function
generate_palette_block_full:
	@ args = 4, pretend = 0, frame = 4, outgoing = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
	fstmfdd	sp!, {d8}
	sub	fp, ip, #4
	cmp	sp, sl
	bllt	__rt_stkovf_split_small
	sub	sp, sp, #20
	ldr	r9, [fp, #4]
	uxtb	r6, r1
	mov	r5, r9, asr #1
	fmsr	s13, r5	@ int
	fsitod	d7, s13
	fldd	d6, .L23
	mul	r0, r0, r9
	fdivd	d7, d6, d7
	uxtb	r0, r0
	cmp	r5, #0
	uxtb	r7, r2
	uxtb	r8, r3
	str	r0, [sp, #16]
	fcvtsd	s16, d7
	ble	.L16
	mov	r4, #0
	mov	r9, r4
.L18:
	rsb	r3, r4, r5
	fmsr	s15, r3	@ int
	fsitos	s15, s15
	fmuls	s15, s15, s16
	ldr	r3, [sp, #16]
	str	r9, [sp, #0]
	add	r0, r3, r4
	str	r9, [sp, #4]
	str	r9, [sp, #8]
	fsts	s15, [sp, #12]
	uxtb	r0, r0
	mov	r1, r6
	mov	r2, r7
	mov	r3, r8
	add	r4, r4, #1
	bl	set_colour
	cmp	r4, r5
	bne	.L18
	ldr	r3, [sp, #16]
	mov	r4, #0
	uxtab	r9, r3, r5
	uxtb	r3, r9
	str	r3, [sp, #16]
	mov	r9, #255
.L19:
	fmsr	s13, r4	@ int
	fsitos	s15, s13
	fmuls	s15, s15, s16
	ldr	r3, [sp, #16]
	str	r9, [sp, #0]
	add	r0, r3, r4
	str	r9, [sp, #4]
	str	r9, [sp, #8]
	fsts	s15, [sp, #12]
	uxtb	r0, r0
	mov	r1, r6
	mov	r2, r7
	mov	r3, r8
	add	r4, r4, #1
	bl	set_colour
	cmp	r4, r5
	bne	.L19
.L16:
	sub	ip, fp, #44
	fldmfdd	ip!, {d8}
	ldmea	fp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
.L24:
	.align	2
.L23:
	.word	0
	.word	1072693248
	.size	generate_palette_block_full, .-generate_palette_block_full
	.align	2
	.global	generate_palette_block_weighted
	.ascii	"generate_palette_block_weighted\000"
	.align	2
	.word	4278190112
	.type	generate_palette_block_weighted, %function
generate_palette_block_weighted:
	@ args = 4, pretend = 0, frame = 8, outgoing = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
	fstmfdd	sp!, {d8}
	sub	fp, ip, #4
	cmp	sp, sl
	bllt	__rt_stkovf_split_small
	sub	sp, sp, #24
	flds	s9, [fp, #4]	@ int
	fsitod	d7, s9
	fldd	d4, .L34
	fldd	d6, .L34+8
	fmuld	d4, d7, d4
	fldd	d5, .L34+16
	fmuld	d6, d7, d6
	fmuld	d5, d7, d5
	ftosizd	s14, d4
	fsts	s14, [sp, #20]	@ int
	ftosizd	s15, d5
	ftosizd	s14, d6
	flds	s9, [sp, #20]	@ int
	fldd	d6, .L34+24
	fmrs	r9, s15	@ int
	fsitod	d5, s9
	fsitod	d7, s14
	ldr	ip, [fp, #4]
	fdivd	d7, d6, d7
	mul	r0, r0, ip
	fdivd	d6, d6, d5
	uxtb	r0, r0
	cmp	r9, #0
	uxtb	r6, r1
	uxtb	r7, r2
	uxtb	r8, r3
	str	r0, [sp, #16]
	fcvtsd	s17, d7
	fcvtsd	s16, d6
	ble	.L30
	mov	r3, r8
	mov	r4, #0
	mov	r8, r7
	mov	r5, r4
	mov	r7, r6
	mov	r6, r9
	mov	r9, r3
.L29:
	rsb	r2, r4, r6
	fmsr	s15, r2	@ int
	fsitos	s15, s15
	fmuls	s15, s15, s17
	ldr	ip, [sp, #16]
	str	r5, [sp, #0]
	add	r0, ip, r4
	str	r5, [sp, #4]
	str	r5, [sp, #8]
	fsts	s15, [sp, #12]
	uxtb	r0, r0
	mov	r1, r7
	mov	r2, r8
	mov	r3, r9
	add	r4, r4, #1
	bl	set_colour
	cmp	r4, r6
	bne	.L29
	mov	r3, r9
	mov	r9, r6
	mov	r6, r7
	mov	r7, r8
	mov	r8, r3
.L30:
	ldr	ip, [sp, #20]
	cmp	ip, #0
	ble	.L25
	ldr	ip, [sp, #16]
	mov	r4, #0
	uxtab	r9, ip, r9
	uxtb	r9, r9
	mov	r5, #255
.L31:
	fmsr	s9, r4	@ int
	fsitos	s15, s9
	fmuls	s15, s15, s16
	add	r0, r9, r4
	str	r5, [sp, #0]
	str	r5, [sp, #4]
	str	r5, [sp, #8]
	fsts	s15, [sp, #12]
	uxtb	r0, r0
	mov	r1, r6
	mov	r2, r7
	mov	r3, r8
	bl	set_colour
	ldr	ip, [sp, #20]
	add	r4, r4, #1
	cmp	r4, ip
	bne	.L31
.L25:
	sub	ip, fp, #44
	fldmfdd	ip!, {d8}
	ldmea	fp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
.L35:
	.align	2
.L34:
	.word	0
	.word	1072168960
	.word	0
	.word	1071644672
	.word	0
	.word	1070596096
	.word	0
	.word	1072693248
	.size	generate_palette_block_weighted, .-generate_palette_block_weighted
	.align	2
	.global	generate_palette_block_lighten
	.ascii	"generate_palette_block_lighten\000"
	.align	2
	.word	4278190112
	.type	generate_palette_block_lighten, %function
generate_palette_block_lighten:
	@ args = 8, pretend = 0, frame = 0, outgoing = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
	fstmfdd	sp!, {d8}
	sub	fp, ip, #4
	cmp	sp, sl
	bllt	__rt_stkovf_split_small
	sub	sp, sp, #16
	flds	s14, [fp, #4]	@ int
	flds	s12, [fp, #8]
	fsitod	d5, s14
	fldd	d7, .L41
	fcvtds	d6, s12
	fdivd	d7, d7, d5
	fmuld	d7, d7, d6
	ldr	ip, [fp, #4]
	uxtb	r7, r1
	mul	r0, r0, ip
	cmp	ip, #0
	uxtb	r8, r2
	uxtb	r9, r3
	uxtb	r6, r0
	fcvtsd	s16, d7
	ble	.L36
	mov	r4, #0
	mov	r5, #255
.L38:
	fmsr	s14, r4	@ int
	fsitos	s15, s14
	fmuls	s15, s15, s16
	add	r0, r6, r4
	str	r5, [sp, #0]
	str	r5, [sp, #4]
	str	r5, [sp, #8]
	fsts	s15, [sp, #12]
	uxtb	r0, r0
	mov	r1, r7
	mov	r2, r8
	mov	r3, r9
	bl	set_colour
	ldr	ip, [fp, #4]
	add	r4, r4, #1
	cmp	r4, ip
	bne	.L38
.L36:
	sub	ip, fp, #44
	fldmfdd	ip!, {d8}
	ldmea	fp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
.L42:
	.align	2
.L41:
	.word	0
	.word	1072168960
	.size	generate_palette_block_lighten, .-generate_palette_block_lighten
	.align	2
	.global	generate_palette
	.ascii	"generate_palette\000"
	.align	2
	.word	4278190100
	.type	generate_palette, %function
generate_palette:
	@ args = 0, pretend = 0, frame = 0, outgoing = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {r4, r5, fp, ip, lr, pc}
	sub	fp, ip, #4
	cmp	sp, sl
	bllt	__rt_stkovf_split_small
	mov	r0, #0
	sub	sp, sp, #8
	mov	r1, r0
	mov	r2, r0
	mov	r3, r0
	bl	set_colour_vidc
	mov	r1, #0
	mov	r2, r1
	mov	r0, #1
	mov	r3, #170
	bl	set_colour_vidc
	mov	r1, #0
	mov	r3, r1
	mov	r0, #2
	mov	r2, #170
	bl	set_colour_vidc
	mov	r2, #170
	mov	r3, r2
	mov	r0, #3
	mov	r1, #0
	bl	set_colour_vidc
	mov	r2, #0
	mov	r3, r2
	mov	r0, #4
	mov	r1, #170
	bl	set_colour_vidc
	mov	r1, #170
	mov	r3, r1
	mov	r0, #5
	mov	r2, #0
	bl	set_colour_vidc
	mov	r0, #6
	mov	r1, #170
	mov	r2, #85
	mov	r3, #0
	bl	set_colour_vidc
	mov	r1, #170
	mov	r2, r1
	mov	r3, r1
	mov	r0, #7
	bl	set_colour_vidc
	mov	r1, #85
	mov	r2, r1
	mov	r3, r1
	mov	r0, #8
	bl	set_colour_vidc
	mov	r1, #85
	mov	r2, r1
	mov	r0, #9
	mov	r3, #255
	bl	set_colour_vidc
	mov	r1, #85
	mov	r3, r1
	mov	r0, #10
	mov	r2, #255
	bl	set_colour_vidc
	mov	r2, #255
	mov	r3, r2
	mov	r0, #11
	mov	r1, #85
	bl	set_colour_vidc
	mov	r2, #85
	mov	r3, r2
	mov	r0, #12
	mov	r1, #255
	bl	set_colour_vidc
	mov	r1, #255
	mov	r3, r1
	mov	r0, #13
	mov	r2, #85
	bl	set_colour_vidc
	mov	r1, #255
	mov	r2, r1
	mov	r0, #14
	mov	r3, #85
	bl	set_colour_vidc
	mov	r1, #255
	mov	r2, r1
	mov	r3, r1
	mov	r0, #15
	bl	set_colour_vidc
	mov	r4, #16
	mov	ip, #1065353216
	mov	r1, #96
	str	ip, [sp, #4]	@ float
	mov	r2, r1
	mov	r3, r1
	mov	r0, #1
	str	r4, [sp, #0]
	bl	generate_palette_block_lighten
	mov	r5, #1056964608
	mov	r1, #32
	mov	r2, r1
	mov	r3, r1
	mov	r0, #2
	str	r4, [sp, #0]
	str	r5, [sp, #4]	@ float
	bl	generate_palette_block_lighten
	mov	r0, #3
	mov	r1, #155
	mov	r2, #118
	mov	r3, #83
	str	r4, [sp, #0]
	str	r5, [sp, #4]	@ float
	bl	generate_palette_block_lighten
	str	r4, [sp, #0]
	str	r5, [sp, #4]	@ float
	mov	r0, #4
	mov	r1, #7
	mov	r2, #11
	mov	r3, #52
	bl	generate_palette_block_lighten
	ldmea	fp, {r4, r5, fp, sp, pc}
	.size	generate_palette, .-generate_palette
	.align	2
	.global	test_palette
	.ascii	"test_palette\000"
	.align	2
	.word	4278190096
	.type	test_palette, %function
test_palette:
	@ args = 0, pretend = 0, frame = 8, outgoing = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
	sub	fp, ip, #4
	cmp	sp, sl
	bllt	__rt_stkovf_split_small
	ldr	r3, .L49
	sub	sp, sp, #12
	ldr	r7, [r3, #0]
	ldr	r3, .L49+4
	add	r7, r7, r7, lsr #31
	ldr	r3, [r3, #0]
	mov	r7, r7, asr #1
	add	r3, r3, r3, lsr #31
	mov	r3, r3, asr #1
	sub	r2, r7, #64
	sub	r5, r3, #64
	add	r3, r3, #64
	str	r2, [sp, #4]
	str	r3, [sp, #8]
	mov	r8, #0
	add	r7, r7, #64
.L45:
	ldr	r4, [sp, #4]
	mov	r6, r5
	mov	r9, r8
	add	r5, r5, #8
.L46:
	mov	r0, r4
	add	r4, r4, #8
	str	r9, [sp, #0]
	mov	r1, r6
	mov	r2, r4
	mov	r3, r5
	bl	draw_box
	add	r9, r9, #1
	cmp	r7, r4
	uxtb	r9, r9
	bne	.L46
	ldr	r3, [sp, #8]
	add	r8, r8, #16
	cmp	r3, r5
	uxtb	r8, r8
	bne	.L45
	ldmea	fp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
.L50:
	.align	2
.L49:
	.word	screen_width
	.word	screen_height
	.size	test_palette, .-test_palette
	.align	2
	.global	test_palette_wide
	.ascii	"test_palette_wide\000"
	.align	2
	.word	4278190100
	.type	test_palette_wide, %function
test_palette_wide:
	@ args = 0, pretend = 0, frame = 8, outgoing = 4
	@ frame_needed = 1, uses_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
	sub	fp, ip, #4
	cmp	sp, sl
	bllt	__rt_stkovf_split_small
	ldr	r3, .L56
	sub	sp, sp, #12
	ldr	r7, [r3, #0]
	ldr	r3, .L56+4
	add	r7, r7, r7, lsr #31
	ldr	r3, [r3, #0]
	mov	r7, r7, asr #1
	add	r3, r3, r3, lsr #31
	mov	r3, r3, asr #1
	sub	r2, r7, #128
	sub	r5, r3, #32
	add	r3, r3, #32
	str	r2, [sp, #4]
	str	r3, [sp, #8]
	mov	r8, #0
	add	r7, r7, #128
.L52:
	ldr	r4, [sp, #4]
	mov	r6, r5
	mov	r9, r8
	add	r5, r5, #8
.L53:
	mov	r0, r4
	add	r4, r4, #8
	str	r9, [sp, #0]
	mov	r1, r6
	mov	r2, r4
	mov	r3, r5
	bl	draw_box
	add	r9, r9, #1
	cmp	r7, r4
	uxtb	r9, r9
	bne	.L53
	ldr	r3, [sp, #8]
	add	r8, r8, #32
	cmp	r3, r5
	uxtb	r8, r8
	bne	.L52
	ldmea	fp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
.L57:
	.align	2
.L56:
	.word	screen_width
	.word	screen_height
	.size	test_palette_wide, .-test_palette_wide
	.ident	"GCC: (GCCSDK GCC 4.7.4 Release 3) 4.7.4"
